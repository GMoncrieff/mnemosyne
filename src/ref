const http = require("http");
const port = process.env.PORT || 3000;

const { stat, createReadStream } = require("fs");
const { promisify } = require("util");
const { pipeline } = require("stream");
const dir = "/home/zach/somisana-data";
const fileInfo = promisify(stat);

http
  .createServer(async (req, res) => {
    console.log('received req', req.url)
    try {
      const file = `${dir}${req.url}`

      /** Calculate Size of file */
      const { size } = await fileInfo(file);
      const range = req.headers.range;

      /** Check for Range header */
      if (range) {
        /** Extracting Start and End value from Range Header */
        let [start, end] = range.replace(/bytes=/, "").split("-");
        start = parseInt(start, 10);
        end = end ? parseInt(end, 10) : size - 1;

        if (!isNaN(start) && isNaN(end)) {
          start = start;
          end = size - 1;
        }
        if (isNaN(start) && !isNaN(end)) {
          start = size - end;
          end = size - 1;
        }

        // Handle unavailable range request
        if (start >= size || end >= size) {
          // Return the 416 Range Not Satisfiable.
          res.writeHead(416, {
            "Content-Range": `bytes */${size}`
          });
          return res.end();
        }

        /** Sending Partial Content With HTTP Code 206 */
        res.writeHead(206, {
          "Content-Range": `bytes ${start}-${end}/${size}`,
          "Accept-Ranges": "bytes",
          "Content-Length": end - start + 1,
          "Content-Type": "application/netcdf"
        });

        let readable = createReadStream(file, { start: start, end: end });
        pipeline(readable, res, err => {
          if (err) console.error('error', err)
        });

      } else {

        res.writeHead(200, {
          "Content-Length": size,
          "Content-Type": "application/netcdf"
        });

        let readable = createReadStream(file);
        pipeline(readable, res, err => {
          if (err) console.error('error', err)
        });

      }
    } catch {
      res.writeHead(404)
      res.end()
    }
  })
  .listen(port, () => console.log("Running on 3000 port"));